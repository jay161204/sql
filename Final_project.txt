----  Answers  ----

Ans-1

--  Students Table
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    BirthDate DATE,
    EnrollmentDate DATE
);

INSERT INTO Students (StudentID, FirstName, LastName, Email, BirthDate, EnrollmentDate) VALUES
(1, 'John', 'Doe', 'john.doe@email.com', '2000-01-15', '2022-08-01'),
(2, 'Jane', 'Smith', 'jane.smith@email.com', '1999-05-25', '2021-08-01'),
(3, 'Mike', 'Brown', 'mike.brown@email.com', '2001-03-14', '2023-01-10'),
(4, 'Emily', 'Davis', 'emily.davis@email.com', '2000-09-09', '2022-02-15'),
(5, 'Chris', 'Wilson', 'chris.wilson@email.com', '1998-12-30', '2020-07-20'),
(6, 'Sarah', 'Taylor', 'sarah.taylor@email.com', '2002-06-22', '2023-05-18'),
(7, 'David', 'Miller', 'david.miller@email.com', '2001-10-10', '2022-01-11');

Read data:
SELECT * FROM Students;

Update data:
UPDATE Students
SET Email = 'john.new@email.com'
WHERE StudentID = 1;

Delete data:
DELETE FROM Students
WHERE StudentID = 7;




--  Courses Table
CREATE TABLE Courses (
    CourseID INT PRIMARY KEY,
    CourseName VARCHAR(100),
    DepartmentID INT,
    Credits INT
);

INSERT INTO Courses (CourseID, CourseName, DepartmentID, Credits) VALUES
(101, 'Introduction to SQL', 1, 3),
(102, 'Data Structures', 2, 4),
(103, 'Algorithms', 3, 4),
(104, 'Data Structures', 2, 3),
(105, 'Introduction to SQL', 1, 4),
(106, 'Algorithms', 3, 3),
(107, 'Introduction to SQL', 1, 4);


Read data:
SELECT * FROM Courses;

Update data:
UPDATE Courses
SET Credits = 1
WHERE CourseID = 101;

Delete data:
DELETE FROM Courses
WHERE Courses = 107;




--  Instructors Table
CREATE TABLE Instructors (
    InstructorID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    DepartmentID INT
);

INSERT INTO Instructors (InstructorID, FirstName, LastName, Email, DepartmentID) VALUES
(1, 'Alice', 'Johnson', 'alice.johnson@univ.com', 1),
(2, 'Bob', 'Lee', 'bob.lee@univ.com', 2),
(3, 'Carol', 'White', 'carol.white@univ.com', 3),
(4, 'Daniel', 'Green', 'daniel.green@univ.com', 1),
(5, 'Eve', 'Clark', 'eve.clark@univ.com', 4),
(6, 'Frank', 'Moore', 'frank.moore@univ.com', 2),
(7, 'Grace', 'Hall', 'grace.hall@univ.com', 1);


Read data:
SELECT * FROM Instructors;

Update data:
UPDATE Instructors
SET Email = 'john.new@email.com'
WHERE InstructorID = 1;

Delete data:
DELETE FROM Instructors
WHERE InstructorIDID = 7;




--  Enrollments Table
CREATE TABLE Enrollments (
    EnrollmentID INT PRIMARY KEY,
    StudentID INT,
    CourseID INT,
    EnrollmentDate DATE
);

INSERT INTO Enrollments (EnrollmentID, StudentID, CourseID, EnrollmentDate) VALUES
(1, 1, 101, '2022-08-01'),
(2, 2, 102, '2021-08-01'),
(3, 3, 103, '2023-01-12'),
(4, 4, 104, '2022-03-05'),
(5, 5, 105, '2020-08-01'),
(6, 6, 106, '2023-05-20'),
(7, 7, 107, '2022-01-12');



Read data:
SELECT * FROM Enrollments;

Update data:
UPDATE Enrollments
SET EnrollmentDate = '2022-01-2'
WHERE EnrollmentID = 1;

Delete data:
DELETE FROM Enrollments
WHERE EnrollmentID = 7;




--  Departments Table
CREATE TABLE Departments (
    DepartmentID INT PRIMARY KEY,
    DepartmentName VARCHAR(100)
);

INSERT INTO Departments (DepartmentID, DepartmentName) VALUES
(1, 'Computer Science'),
(2, 'Mathematics'),
(3, 'Physics'),
(4, 'Chemistry'),
(5, 'Statistics'),
(6, 'Information Technology'),
(7, 'Biology');


Read data:
SELECT * FROM Departments;

Update data:
UPDATE Departments
SET DepartmentName = 'Chemistry'
WHERE Departments= 1;

Delete data:
DELETE FROM Departments
WHERE DepartmentID = 6;




Ans-2
SELECT *
FROM Students
WHERE EnrollmentDate > '2022-12-31';




Ans-3
SELECT CourseName
FROM Courses
WHERE DepartmentID = 2
LIMIT 5;




Ans-4
SELECT CourseID, COUNT(StudentID) AS TotalStudents
FROM Enrollments
GROUP BY CourseID
HAVING COUNT(StudentID) > 5;




Ans-5
SELECT *
FROM courses c
WHERE c.CourseName = 'Introduction to SQL' AND c.CourseName = 'Data Structures'




Ans-6
SELECT *
FROM courses c
WHERE c.CourseName = 'Introduction to SQL' OR c.CourseName = 'Data Structures'




Ans-7
SELECT AVG(Credits) AS AvgCredits
FROM Courses;





Ans-8

-- Add new Salary column
ALTER TABLE Instructors
ADD Salary DECIMAL(10,2);

-- Update salary values for each instructor
UPDATE Instructors SET Salary = 75000.00 WHERE InstructorID = 1;  
UPDATE Instructors SET Salary = 68000.00 WHERE InstructorID = 2;  
UPDATE Instructors SET Salary = 72000.00 WHERE InstructorID = 3;  
UPDATE Instructors SET Salary = 81000.00 WHERE InstructorID = 4; 
UPDATE Instructors SET Salary = 69000.00 WHERE InstructorID = 5;   
UPDATE Instructors SET Salary = 70000.00 WHERE InstructorID = 6;  
UPDATE Instructors SET Salary = 85000.00 WHERE InstructorID = 7; 


SELECT MAX(salary) AS TotalInstructors
FROM Instructors
WHERE DepartmentID = 1;





Ans-9
SELECT d.DepartmentName, COUNT(e.StudentID) AS TotalStudents
FROM Enrollments e
JOIN Courses c ON e.CourseID = c.CourseID
JOIN Departments d ON c.DepartmentID = d.DepartmentID
GROUP BY d.DepartmentName;





Ans-10
SELECT s.StudentID, s.FirstName, s.LastName, c.CourseName
FROM Students s
INNER JOIN Enrollments e ON s.StudentID = e.StudentID
INNER JOIN Courses c ON e.CourseID = c.CourseID;




Ans-11
SELECT s.StudentID, s.FirstName, s.LastName, c.CourseName
FROM Students s
LEFT JOIN Enrollments e ON s.StudentID = e.StudentID
LEFT JOIN Courses c ON e.CourseID = c.CourseID;




Ans-12
SELECT s.StudentID, s.FirstName, s.LastName
FROM Students s
WHERE s.StudentID IN (
    SELECT e.StudentID
    FROM Enrollments e
    WHERE e.CourseID IN (
        SELECT CourseID
        FROM Enrollments
        GROUP BY CourseID
        HAVING COUNT(StudentID) > 10
    )
);




Ans-13
SELECT StudentID, FirstName, LastName, YEAR(EnrollmentDate) AS EnrollmentYear
FROM Students;




Ans-14
SELECT 
    *, 
    CONCAT(FirstName, ' ', LastName) AS full_name
FROM instructors;




Ans-15
SELECT 
    e.EnrollmentID,
    e.CourseID,
    COUNT(e.StudentID) OVER (ORDER BY e.EnrollmentID) AS RunningTotal
FROM Enrollments e;




Ans-16
SELECT 
    StudentID,
    FirstName,
    LastName,
    EnrollmentDate,
    CASE 
        WHEN (YEAR(CURDATE()) - YEAR(EnrollmentDate)) > 4 THEN 'Senior'
        ELSE 'Junior'
    END AS StudentLevel
FROM Students;
